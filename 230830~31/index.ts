// typescript 변수의 타입 지정

// JS의 경우에는 ' 변수명 = 초기값 ' 해당방법으로 변수를 선언했는데
// TS의 경우에는 ' 변수명 : 타입명 = 초기값 '의 형태로 변수를 선언한다.

// 개발 환경에서 확인하기 위해서 실행하고자 하면
// node 환경에서 실행시켜볼 수 있나?
// ts-node 사용. 개발 환경에서 typescript로 작성된 코드를 실행 시켜볼 수 있다.
// 기존 js는 node를 통해 실행시켰는데
// ts는 node가 해석을 할 수 없기 때문에 타입해석이 가능한 ts-node로 실행시켜줘야 한다.

// ts-node typeScript 실행환경
    // typescript를 js로 컴파일해서 실행 필요없이 node환경에서 실행 가능

    // 1. typescript를 컴파일 내부 컴파일러를 통해 메모리 상에 js코드로 변환
        // js 파일을 만들지 않고 컴파일한 js코드로 메모리상에 갖고 있는다.
    // 2. 컴파일된 js코드를 nodejs 런타임 환경으로 실행. 그 다음 코드 실행 결과를 출력
        // (타입 검사로 코드에서 발생할 오류를 미리 또 알려준다.)

// 설치 명령어 ----------------------------------------------------------------
// node.js는 js 런타임 환경인데 내장 함수 및 모듈에 대한 타입 정보가 필요하다. 
// @types/node: nodejs 타입 정보를 패키지로 설치해서 사용

// npm install ts-node @types/node
// -------------------------------------------------------------------------


// 실행 가이드
// js => node 환경에서는 ' node app.js '로 실행했었는데,

// typescript => ts-node 환경에서는 아래와 같은 방법으로 사용한다.
// npx ts-node app.ts















